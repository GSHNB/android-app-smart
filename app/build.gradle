apply plugin: 'com.android.application'
apply from: 'tinker-support.gradle'
apply plugin: 'walle'
android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    defaultConfig {
        applicationId "com.nsxz.smart"
        minSdkVersion 16
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode APP_VERSION_CODE as int
        versionName APP_VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi','armeabi-v7a'
        }
        javaCompileOptions{
            annotationProcessorOptions{
                includeCompileClasspath = true
            }
        }

    }

    signingConfigs {
        debug {
            storeFile file(SMART_STORE_FILE)
            storePassword SMART_STORE_PASSWORD
            keyAlias SMART_KEY_ALIAS
            keyPassword SMART_KEY_PASSWORD
        }

        release {
            storeFile file(SMART_STORE_FILE)
            storePassword SMART_STORE_PASSWORD
            keyAlias SMART_KEY_ALIAS
            keyPassword SMART_KEY_PASSWORD
        }
    }

    buildTypes {

        debug {
            versionNameSuffix '.debug'
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    android.variantFilter { variant ->
//        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'demo') {
//            variant.setIgnore(true)
//        }
//    }

    productFlavors{
        flavorDimensions "environment"
        demo{
            dimension "environment"
        }

        online{
            dimension "environment"
        }
    }

}

walle {
//    def rootPath=buildDir.getParentFile().getParentFile();
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${rootDir}/output/Build_${BUILD_NUMBER}/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = 'smart-${buildType}-${channel}-${flavorName}-${versionName}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:design:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
//    implementation "com.google.auto.value:auto-value:1.4.1"
//    apt  "com.google.auto.value:auto-value:1.4.1"
//    apt 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.6'
    implementation 'com.jakewharton:butterknife:7.0.1'
    implementation "com.android.support:multidex:1.0.1" // 多dex配置
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.9'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    implementation 'com.meituan.android.walle:library:1.1.6'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0' // 必要依赖，和Rxjava结合必须用到，下面会提到
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0' // 必要依赖，解析json字符所用
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    implementation 'android.arch.paging:runtime:1.0.1'

    implementation 'com.squareup.okhttp3:okhttp:3.6.0'
    testImplementation 'junit:junit:4.12'


}
