apply plugin: 'com.android.application'
apply from: 'tinker-support.gradle'
apply plugin: 'walle'
android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    defaultConfig {
        applicationId "com.nsxz.smart"
        minSdkVersion 16
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode APP_VERSION_CODE as int
        versionName APP_VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        multiDexEnabled true

    }

    signingConfigs {
        debug {
            storeFile file(SMART_STORE_FILE)
            storePassword SMART_STORE_PASSWORD
            keyAlias SMART_KEY_ALIAS
            keyPassword SMART_KEY_PASSWORD
        }

        release {
            storeFile file(SMART_STORE_FILE)
            storePassword SMART_STORE_PASSWORD
            keyAlias SMART_KEY_ALIAS
            keyPassword SMART_KEY_PASSWORD
        }
    }

    buildTypes {

        debug {
            versionNameSuffix '.debug'
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        flavorDimensions "environment"
        demo {
            dimension "environment"
        }

        online {
            dimension "environment"
        }
    }

}

walle {
//    def rootPath=buildDir.getParentFile().getParentFile();
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${rootDir}/output/Build_${BUILD_NUMBER}/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = 'smart-${buildType}-${channel}-${flavorName}-${versionName}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

dependencies {
    def work_version = "2.0.1"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha04'
    implementation 'com.google.android.material:material:1.1.0-alpha05'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.6'
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

    implementation 'androidx.multidex:multidex:2.0.0' // 多dex配置
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.9'
    implementation 'com.tencent.bugly:nativecrashreport:3.6.0.1'
    implementation 'com.meituan.android.walle:library:1.1.6'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0' // 必要依赖，和Rxjava结合必须用到，下面会提到
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0' // 必要依赖，解析json字符所用
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    implementation 'androidx.paging:paging-runtime:2.1.0'
    api 'androidx.lifecycle:lifecycle-extensions:2.1.0-alpha04'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.google.dagger:dagger-android:2.17'
    implementation 'com.google.dagger:dagger-android-support:2.17' // if you use the support libraries
    implementation 'com.google.dagger:dagger:2.17'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.17'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.17'
    implementation "android.arch.persistence.room:runtime:1.1.1"
    implementation "android.arch.persistence.room:rxjava2:1.1.1"
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-rxjava2:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
    testImplementation 'junit:junit:4.12'


}
